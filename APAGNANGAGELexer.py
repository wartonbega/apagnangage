# Generated from APAGNANGAGE.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,26,360,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,4,0,73,8,0,11,0,12,0,74,1,1,1,1,1,1,1,1,3,
        1,81,8,1,1,2,4,2,84,8,2,11,2,12,2,85,1,2,1,2,1,2,3,2,91,8,2,1,2,
        5,2,94,8,2,10,2,12,2,97,9,2,1,2,5,2,100,8,2,10,2,12,2,103,9,2,3,
        2,105,8,2,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,
        6,1,6,1,6,1,6,5,6,124,8,6,10,6,12,6,127,9,6,1,6,1,6,1,6,1,6,1,6,
        1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,5,11,158,8,11,10,11,12,11,
        161,9,11,1,11,1,11,5,11,165,8,11,10,11,12,11,168,9,11,1,11,1,11,
        1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,
        1,16,1,16,1,16,1,16,5,16,189,8,16,10,16,12,16,192,9,16,1,16,1,16,
        1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,19,
        1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,5,20,218,8,20,10,20,
        12,20,221,9,20,1,20,1,20,1,20,1,20,1,20,1,20,5,20,229,8,20,10,20,
        12,20,232,9,20,1,20,1,20,1,20,1,20,3,20,238,8,20,1,21,1,21,1,21,
        1,21,5,21,244,8,21,10,21,12,21,247,9,21,1,21,1,21,1,22,1,22,1,22,
        1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
        1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
        1,22,1,22,1,22,1,22,1,22,1,22,3,22,286,8,22,1,23,1,23,3,23,290,8,
        23,1,24,1,24,5,24,294,8,24,10,24,12,24,297,9,24,1,24,3,24,300,8,
        24,1,25,1,25,5,25,304,8,25,10,25,12,25,307,9,25,1,25,3,25,310,8,
        25,1,25,1,25,1,26,1,26,5,26,316,8,26,10,26,12,26,319,9,26,1,26,3,
        26,322,8,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,
        29,1,29,1,29,1,29,3,29,338,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,
        30,5,30,347,8,30,10,30,12,30,350,9,30,1,30,1,30,1,31,4,31,355,8,
        31,11,31,12,31,356,1,31,1,31,2,305,317,0,32,1,1,3,0,5,2,7,3,9,0,
        11,4,13,5,15,6,17,7,19,8,21,9,23,10,25,11,27,12,29,13,31,14,33,15,
        35,16,37,17,39,18,41,0,43,0,45,0,47,0,49,19,51,20,53,21,55,22,57,
        23,59,24,61,25,63,26,1,0,10,3,0,9,10,13,13,32,32,2,0,10,10,65,65,
        2,0,10,10,78,78,2,0,10,10,83,83,2,0,10,10,69,69,2,0,10,10,76,76,
        2,0,10,10,67,67,2,0,10,10,75,75,3,0,10,10,66,66,68,68,1,0,10,10,
        389,0,1,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
        0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
        0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
        0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,
        0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,
        0,0,63,1,0,0,0,1,72,1,0,0,0,3,80,1,0,0,0,5,104,1,0,0,0,7,106,1,0,
        0,0,9,110,1,0,0,0,11,112,1,0,0,0,13,117,1,0,0,0,15,133,1,0,0,0,17,
        138,1,0,0,0,19,143,1,0,0,0,21,148,1,0,0,0,23,155,1,0,0,0,25,173,
        1,0,0,0,27,175,1,0,0,0,29,177,1,0,0,0,31,179,1,0,0,0,33,181,1,0,
        0,0,35,200,1,0,0,0,37,204,1,0,0,0,39,207,1,0,0,0,41,213,1,0,0,0,
        43,239,1,0,0,0,45,285,1,0,0,0,47,289,1,0,0,0,49,291,1,0,0,0,51,301,
        1,0,0,0,53,313,1,0,0,0,55,325,1,0,0,0,57,328,1,0,0,0,59,337,1,0,
        0,0,61,339,1,0,0,0,63,354,1,0,0,0,65,66,5,65,0,0,66,73,5,80,0,0,
        67,68,5,65,0,0,68,69,5,71,0,0,69,73,5,78,0,0,70,71,5,65,0,0,71,73,
        5,78,0,0,72,65,1,0,0,0,72,67,1,0,0,0,72,70,1,0,0,0,73,74,1,0,0,0,
        74,72,1,0,0,0,74,75,1,0,0,0,75,2,1,0,0,0,76,81,5,80,0,0,77,78,5,
        71,0,0,78,81,5,78,0,0,79,81,5,78,0,0,80,76,1,0,0,0,80,77,1,0,0,0,
        80,79,1,0,0,0,81,4,1,0,0,0,82,84,5,65,0,0,83,82,1,0,0,0,84,85,1,
        0,0,0,85,83,1,0,0,0,85,86,1,0,0,0,86,105,1,0,0,0,87,88,5,65,0,0,
        88,91,5,65,0,0,89,91,3,3,1,0,90,87,1,0,0,0,90,89,1,0,0,0,91,101,
        1,0,0,0,92,94,5,65,0,0,93,92,1,0,0,0,94,97,1,0,0,0,95,93,1,0,0,0,
        95,96,1,0,0,0,96,98,1,0,0,0,97,95,1,0,0,0,98,100,3,3,1,0,99,95,1,
        0,0,0,100,103,1,0,0,0,101,99,1,0,0,0,101,102,1,0,0,0,102,105,1,0,
        0,0,103,101,1,0,0,0,104,83,1,0,0,0,104,90,1,0,0,0,105,6,1,0,0,0,
        106,107,5,80,0,0,107,108,5,79,0,0,108,109,5,86,0,0,109,8,1,0,0,0,
        110,111,7,0,0,0,111,10,1,0,0,0,112,113,5,68,0,0,113,114,5,65,0,0,
        114,115,5,78,0,0,115,116,5,83,0,0,116,12,1,0,0,0,117,118,5,81,0,
        0,118,119,5,85,0,0,119,120,5,79,0,0,120,121,5,73,0,0,121,125,1,0,
        0,0,122,124,3,9,4,0,123,122,1,0,0,0,124,127,1,0,0,0,125,123,1,0,
        0,0,125,126,1,0,0,0,126,128,1,0,0,0,127,125,1,0,0,0,128,129,5,70,
        0,0,129,130,5,69,0,0,130,131,5,85,0,0,131,132,5,82,0,0,132,14,1,
        0,0,0,133,134,5,81,0,0,134,135,5,85,0,0,135,136,5,79,0,0,136,137,
        5,73,0,0,137,16,1,0,0,0,138,139,5,70,0,0,139,140,5,69,0,0,140,141,
        5,85,0,0,141,142,5,82,0,0,142,18,1,0,0,0,143,144,5,70,0,0,144,145,
        5,65,0,0,145,146,5,73,0,0,146,147,5,84,0,0,147,20,1,0,0,0,148,149,
        5,66,0,0,149,150,5,69,0,0,150,151,5,76,0,0,151,152,5,69,0,0,152,
        153,5,67,0,0,153,154,5,75,0,0,154,22,1,0,0,0,155,159,5,67,0,0,156,
        158,3,9,4,0,157,156,1,0,0,0,158,161,1,0,0,0,159,157,1,0,0,0,159,
        160,1,0,0,0,160,162,1,0,0,0,161,159,1,0,0,0,162,166,5,39,0,0,163,
        165,3,9,4,0,164,163,1,0,0,0,165,168,1,0,0,0,166,164,1,0,0,0,166,
        167,1,0,0,0,167,169,1,0,0,0,168,166,1,0,0,0,169,170,5,69,0,0,170,
        171,5,83,0,0,171,172,5,84,0,0,172,24,1,0,0,0,173,174,5,43,0,0,174,
        26,1,0,0,0,175,176,5,45,0,0,176,28,1,0,0,0,177,178,5,42,0,0,178,
        30,1,0,0,0,179,180,5,47,0,0,180,32,1,0,0,0,181,182,5,71,0,0,182,
        183,5,82,0,0,183,184,5,65,0,0,184,185,5,78,0,0,185,186,5,68,0,0,
        186,190,1,0,0,0,187,189,3,9,4,0,188,187,1,0,0,0,189,192,1,0,0,0,
        190,188,1,0,0,0,190,191,1,0,0,0,191,193,1,0,0,0,192,190,1,0,0,0,
        193,194,5,83,0,0,194,195,5,65,0,0,195,196,5,66,0,0,196,197,5,76,
        0,0,197,198,5,79,0,0,198,199,5,78,0,0,199,34,1,0,0,0,200,201,5,79,
        0,0,201,202,5,85,0,0,202,203,5,72,0,0,203,36,1,0,0,0,204,205,5,70,
        0,0,205,206,5,70,0,0,206,38,1,0,0,0,207,208,5,71,0,0,208,209,5,69,
        0,0,209,210,5,78,0,0,210,211,5,82,0,0,211,212,5,69,0,0,212,40,1,
        0,0,0,213,214,5,84,0,0,214,215,5,85,0,0,215,219,1,0,0,0,216,218,
        3,9,4,0,217,216,1,0,0,0,218,221,1,0,0,0,219,217,1,0,0,0,219,220,
        1,0,0,0,220,222,1,0,0,0,221,219,1,0,0,0,222,223,5,70,0,0,223,224,
        5,65,0,0,224,225,5,73,0,0,225,226,5,83,0,0,226,230,1,0,0,0,227,229,
        3,9,4,0,228,227,1,0,0,0,229,232,1,0,0,0,230,228,1,0,0,0,230,231,
        1,0,0,0,231,233,1,0,0,0,232,230,1,0,0,0,233,234,5,85,0,0,234,235,
        5,78,0,0,235,237,1,0,0,0,236,238,3,9,4,0,237,236,1,0,0,0,237,238,
        1,0,0,0,238,42,1,0,0,0,239,240,5,69,0,0,240,241,5,72,0,0,241,245,
        1,0,0,0,242,244,3,9,4,0,243,242,1,0,0,0,244,247,1,0,0,0,245,243,
        1,0,0,0,245,246,1,0,0,0,246,248,1,0,0,0,247,245,1,0,0,0,248,249,
        5,33,0,0,249,44,1,0,0,0,250,251,5,68,0,0,251,286,8,1,0,0,252,253,
        5,68,0,0,253,254,5,65,0,0,254,255,1,0,0,0,255,286,8,2,0,0,256,257,
        5,68,0,0,257,258,5,65,0,0,258,259,5,78,0,0,259,260,1,0,0,0,260,286,
        8,3,0,0,261,262,5,66,0,0,262,286,8,4,0,0,263,264,5,66,0,0,264,265,
        5,69,0,0,265,266,1,0,0,0,266,286,8,5,0,0,267,268,5,66,0,0,268,269,
        5,69,0,0,269,270,5,76,0,0,270,271,1,0,0,0,271,286,8,4,0,0,272,273,
        5,66,0,0,273,274,5,69,0,0,274,275,5,76,0,0,275,276,5,69,0,0,276,
        277,1,0,0,0,277,286,8,6,0,0,278,279,5,66,0,0,279,280,5,69,0,0,280,
        281,5,76,0,0,281,282,5,69,0,0,282,283,5,67,0,0,283,284,1,0,0,0,284,
        286,8,7,0,0,285,250,1,0,0,0,285,252,1,0,0,0,285,256,1,0,0,0,285,
        261,1,0,0,0,285,263,1,0,0,0,285,267,1,0,0,0,285,272,1,0,0,0,285,
        278,1,0,0,0,286,46,1,0,0,0,287,290,8,8,0,0,288,290,3,45,22,0,289,
        287,1,0,0,0,289,288,1,0,0,0,290,48,1,0,0,0,291,295,3,41,20,0,292,
        294,3,47,23,0,293,292,1,0,0,0,294,297,1,0,0,0,295,293,1,0,0,0,295,
        296,1,0,0,0,296,299,1,0,0,0,297,295,1,0,0,0,298,300,3,21,10,0,299,
        298,1,0,0,0,299,300,1,0,0,0,300,50,1,0,0,0,301,305,3,41,20,0,302,
        304,3,47,23,0,303,302,1,0,0,0,304,307,1,0,0,0,305,306,1,0,0,0,305,
        303,1,0,0,0,306,309,1,0,0,0,307,305,1,0,0,0,308,310,5,32,0,0,309,
        308,1,0,0,0,309,310,1,0,0,0,310,311,1,0,0,0,311,312,3,11,5,0,312,
        52,1,0,0,0,313,317,3,43,21,0,314,316,3,47,23,0,315,314,1,0,0,0,316,
        319,1,0,0,0,317,318,1,0,0,0,317,315,1,0,0,0,318,321,1,0,0,0,319,
        317,1,0,0,0,320,322,5,32,0,0,321,320,1,0,0,0,321,322,1,0,0,0,322,
        323,1,0,0,0,323,324,3,11,5,0,324,54,1,0,0,0,325,326,5,79,0,0,326,
        327,5,66,0,0,327,56,1,0,0,0,328,329,5,83,0,0,329,330,5,71,0,0,330,
        58,1,0,0,0,331,332,5,76,0,0,332,338,5,69,0,0,333,334,5,76,0,0,334,
        338,5,65,0,0,335,336,5,76,0,0,336,338,5,39,0,0,337,331,1,0,0,0,337,
        333,1,0,0,0,337,335,1,0,0,0,338,60,1,0,0,0,339,340,5,67,0,0,340,
        341,5,82,0,0,341,342,5,65,0,0,342,343,5,82,0,0,343,344,5,73,0,0,
        344,348,1,0,0,0,345,347,8,9,0,0,346,345,1,0,0,0,347,350,1,0,0,0,
        348,346,1,0,0,0,348,349,1,0,0,0,349,351,1,0,0,0,350,348,1,0,0,0,
        351,352,6,30,0,0,352,62,1,0,0,0,353,355,3,9,4,0,354,353,1,0,0,0,
        355,356,1,0,0,0,356,354,1,0,0,0,356,357,1,0,0,0,357,358,1,0,0,0,
        358,359,6,31,0,0,359,64,1,0,0,0,28,0,72,74,80,85,90,95,101,104,125,
        159,166,190,219,230,237,245,285,289,295,299,305,309,317,321,337,
        348,356,1,6,0,0
    ]

class APAGNANGAGELexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    ID = 1
    INT = 2
    PRINT = 3
    ASSIGN = 4
    FUNCTION_DEF = 5
    FUNCTION_CALL = 6
    RETURN = 7
    BLOCK_START = 8
    BLOCK_END = 9
    EQUALS = 10
    PLUS = 11
    MINUS = 12
    MULTIPLY = 13
    DIVIDE = 14
    LOOP = 15
    LOOP_COUNTER = 16
    BREAK = 17
    IF = 18
    STRING_LINE = 19
    STRING_ASSIGN = 20
    STRING_INPUT = 21
    LIST = 22
    LIST_POP = 23
    LIST_INDEX = 24
    COMMENT = 25
    WS_ = 26

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'POV'", "'DANS'", "'QUOI'", "'FEUR'", "'FAIT'", "'BELECK'", 
            "'+'", "'-'", "'*'", "'/'", "'OUH'", "'FF'", "'GENRE'", "'OB'", 
            "'SG'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "INT", "PRINT", "ASSIGN", "FUNCTION_DEF", "FUNCTION_CALL", 
            "RETURN", "BLOCK_START", "BLOCK_END", "EQUALS", "PLUS", "MINUS", 
            "MULTIPLY", "DIVIDE", "LOOP", "LOOP_COUNTER", "BREAK", "IF", 
            "STRING_LINE", "STRING_ASSIGN", "STRING_INPUT", "LIST", "LIST_POP", 
            "LIST_INDEX", "COMMENT", "WS_" ]

    ruleNames = [ "ID", "DECIMAL_SEPARATOR", "INT", "PRINT", "WS", "ASSIGN", 
                  "FUNCTION_DEF", "FUNCTION_CALL", "RETURN", "BLOCK_START", 
                  "BLOCK_END", "EQUALS", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", 
                  "LOOP", "LOOP_COUNTER", "BREAK", "IF", "STRING_START", 
                  "INPUT", "CHARS_NOT_ALLOWED_COMPLETIONS", "CHARS", "STRING_LINE", 
                  "STRING_ASSIGN", "STRING_INPUT", "LIST", "LIST_POP", "LIST_INDEX", 
                  "COMMENT", "WS_" ]

    grammarFileName = "APAGNANGAGE.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


