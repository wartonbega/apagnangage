# Generated from APAGNANGAGE.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,26,364,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,4,0,73,8,0,11,0,12,0,74,1,1,1,1,1,1,1,1,3,
        1,81,8,1,1,2,4,2,84,8,2,11,2,12,2,85,1,2,1,2,1,2,3,2,91,8,2,1,2,
        5,2,94,8,2,10,2,12,2,97,9,2,1,2,5,2,100,8,2,10,2,12,2,103,9,2,1,
        2,1,2,1,2,1,2,3,2,109,8,2,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,
        5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,5,6,128,8,6,10,6,12,6,131,9,6,1,6,
        1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,
        1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,5,11,162,
        8,11,10,11,12,11,165,9,11,1,11,1,11,5,11,169,8,11,10,11,12,11,172,
        9,11,1,11,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,
        1,16,1,16,1,16,1,16,1,16,1,16,1,16,5,16,193,8,16,10,16,12,16,196,
        9,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,
        1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,5,20,
        222,8,20,10,20,12,20,225,9,20,1,20,1,20,1,20,1,20,1,20,1,20,5,20,
        233,8,20,10,20,12,20,236,9,20,1,20,1,20,1,20,1,20,3,20,242,8,20,
        1,21,1,21,1,21,1,21,5,21,248,8,21,10,21,12,21,251,9,21,1,21,1,21,
        1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
        1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
        1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,290,8,22,1,23,
        1,23,3,23,294,8,23,1,24,1,24,5,24,298,8,24,10,24,12,24,301,9,24,
        1,24,3,24,304,8,24,1,25,1,25,5,25,308,8,25,10,25,12,25,311,9,25,
        1,25,3,25,314,8,25,1,25,1,25,1,26,1,26,5,26,320,8,26,10,26,12,26,
        323,9,26,1,26,3,26,326,8,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,
        28,1,29,1,29,1,29,1,29,1,29,1,29,3,29,342,8,29,1,30,1,30,1,30,1,
        30,1,30,1,30,1,30,5,30,351,8,30,10,30,12,30,354,9,30,1,30,1,30,1,
        31,4,31,359,8,31,11,31,12,31,360,1,31,1,31,2,309,321,0,32,1,1,3,
        0,5,2,7,3,9,0,11,4,13,5,15,6,17,7,19,8,21,9,23,10,25,11,27,12,29,
        13,31,14,33,15,35,16,37,17,39,18,41,0,43,0,45,0,47,0,49,19,51,20,
        53,21,55,22,57,23,59,24,61,25,63,26,1,0,10,3,0,9,10,13,13,32,32,
        2,0,10,10,65,65,2,0,10,10,78,78,2,0,10,10,83,83,2,0,10,10,69,69,
        2,0,10,10,76,76,2,0,10,10,67,67,2,0,10,10,75,75,3,0,10,10,66,66,
        68,68,1,0,10,10,394,0,1,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,11,1,0,
        0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
        0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
        0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,49,1,0,
        0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,
        0,0,0,61,1,0,0,0,0,63,1,0,0,0,1,72,1,0,0,0,3,80,1,0,0,0,5,108,1,
        0,0,0,7,110,1,0,0,0,9,114,1,0,0,0,11,116,1,0,0,0,13,121,1,0,0,0,
        15,137,1,0,0,0,17,142,1,0,0,0,19,147,1,0,0,0,21,152,1,0,0,0,23,159,
        1,0,0,0,25,177,1,0,0,0,27,179,1,0,0,0,29,181,1,0,0,0,31,183,1,0,
        0,0,33,185,1,0,0,0,35,204,1,0,0,0,37,208,1,0,0,0,39,211,1,0,0,0,
        41,217,1,0,0,0,43,243,1,0,0,0,45,289,1,0,0,0,47,293,1,0,0,0,49,295,
        1,0,0,0,51,305,1,0,0,0,53,317,1,0,0,0,55,329,1,0,0,0,57,332,1,0,
        0,0,59,341,1,0,0,0,61,343,1,0,0,0,63,358,1,0,0,0,65,66,5,65,0,0,
        66,73,5,80,0,0,67,68,5,65,0,0,68,69,5,71,0,0,69,73,5,78,0,0,70,71,
        5,65,0,0,71,73,5,78,0,0,72,65,1,0,0,0,72,67,1,0,0,0,72,70,1,0,0,
        0,73,74,1,0,0,0,74,72,1,0,0,0,74,75,1,0,0,0,75,2,1,0,0,0,76,81,5,
        80,0,0,77,78,5,71,0,0,78,81,5,78,0,0,79,81,5,78,0,0,80,76,1,0,0,
        0,80,77,1,0,0,0,80,79,1,0,0,0,81,4,1,0,0,0,82,84,5,65,0,0,83,82,
        1,0,0,0,84,85,1,0,0,0,85,83,1,0,0,0,85,86,1,0,0,0,86,109,1,0,0,0,
        87,88,5,65,0,0,88,91,5,65,0,0,89,91,3,3,1,0,90,87,1,0,0,0,90,89,
        1,0,0,0,91,101,1,0,0,0,92,94,5,65,0,0,93,92,1,0,0,0,94,97,1,0,0,
        0,95,93,1,0,0,0,95,96,1,0,0,0,96,98,1,0,0,0,97,95,1,0,0,0,98,100,
        3,3,1,0,99,95,1,0,0,0,100,103,1,0,0,0,101,99,1,0,0,0,101,102,1,0,
        0,0,102,109,1,0,0,0,103,101,1,0,0,0,104,105,5,82,0,0,105,106,5,73,
        0,0,106,107,5,69,0,0,107,109,5,78,0,0,108,83,1,0,0,0,108,90,1,0,
        0,0,108,104,1,0,0,0,109,6,1,0,0,0,110,111,5,80,0,0,111,112,5,79,
        0,0,112,113,5,86,0,0,113,8,1,0,0,0,114,115,7,0,0,0,115,10,1,0,0,
        0,116,117,5,68,0,0,117,118,5,65,0,0,118,119,5,78,0,0,119,120,5,83,
        0,0,120,12,1,0,0,0,121,122,5,81,0,0,122,123,5,85,0,0,123,124,5,79,
        0,0,124,125,5,73,0,0,125,129,1,0,0,0,126,128,3,9,4,0,127,126,1,0,
        0,0,128,131,1,0,0,0,129,127,1,0,0,0,129,130,1,0,0,0,130,132,1,0,
        0,0,131,129,1,0,0,0,132,133,5,70,0,0,133,134,5,69,0,0,134,135,5,
        85,0,0,135,136,5,82,0,0,136,14,1,0,0,0,137,138,5,81,0,0,138,139,
        5,85,0,0,139,140,5,79,0,0,140,141,5,73,0,0,141,16,1,0,0,0,142,143,
        5,70,0,0,143,144,5,69,0,0,144,145,5,85,0,0,145,146,5,82,0,0,146,
        18,1,0,0,0,147,148,5,70,0,0,148,149,5,65,0,0,149,150,5,73,0,0,150,
        151,5,84,0,0,151,20,1,0,0,0,152,153,5,66,0,0,153,154,5,69,0,0,154,
        155,5,76,0,0,155,156,5,69,0,0,156,157,5,67,0,0,157,158,5,75,0,0,
        158,22,1,0,0,0,159,163,5,67,0,0,160,162,3,9,4,0,161,160,1,0,0,0,
        162,165,1,0,0,0,163,161,1,0,0,0,163,164,1,0,0,0,164,166,1,0,0,0,
        165,163,1,0,0,0,166,170,5,39,0,0,167,169,3,9,4,0,168,167,1,0,0,0,
        169,172,1,0,0,0,170,168,1,0,0,0,170,171,1,0,0,0,171,173,1,0,0,0,
        172,170,1,0,0,0,173,174,5,69,0,0,174,175,5,83,0,0,175,176,5,84,0,
        0,176,24,1,0,0,0,177,178,5,43,0,0,178,26,1,0,0,0,179,180,5,45,0,
        0,180,28,1,0,0,0,181,182,5,42,0,0,182,30,1,0,0,0,183,184,5,47,0,
        0,184,32,1,0,0,0,185,186,5,71,0,0,186,187,5,82,0,0,187,188,5,65,
        0,0,188,189,5,78,0,0,189,190,5,68,0,0,190,194,1,0,0,0,191,193,3,
        9,4,0,192,191,1,0,0,0,193,196,1,0,0,0,194,192,1,0,0,0,194,195,1,
        0,0,0,195,197,1,0,0,0,196,194,1,0,0,0,197,198,5,83,0,0,198,199,5,
        65,0,0,199,200,5,66,0,0,200,201,5,76,0,0,201,202,5,79,0,0,202,203,
        5,78,0,0,203,34,1,0,0,0,204,205,5,79,0,0,205,206,5,85,0,0,206,207,
        5,72,0,0,207,36,1,0,0,0,208,209,5,70,0,0,209,210,5,70,0,0,210,38,
        1,0,0,0,211,212,5,71,0,0,212,213,5,69,0,0,213,214,5,78,0,0,214,215,
        5,82,0,0,215,216,5,69,0,0,216,40,1,0,0,0,217,218,5,84,0,0,218,219,
        5,85,0,0,219,223,1,0,0,0,220,222,3,9,4,0,221,220,1,0,0,0,222,225,
        1,0,0,0,223,221,1,0,0,0,223,224,1,0,0,0,224,226,1,0,0,0,225,223,
        1,0,0,0,226,227,5,70,0,0,227,228,5,65,0,0,228,229,5,73,0,0,229,230,
        5,83,0,0,230,234,1,0,0,0,231,233,3,9,4,0,232,231,1,0,0,0,233,236,
        1,0,0,0,234,232,1,0,0,0,234,235,1,0,0,0,235,237,1,0,0,0,236,234,
        1,0,0,0,237,238,5,85,0,0,238,239,5,78,0,0,239,241,1,0,0,0,240,242,
        3,9,4,0,241,240,1,0,0,0,241,242,1,0,0,0,242,42,1,0,0,0,243,244,5,
        69,0,0,244,245,5,72,0,0,245,249,1,0,0,0,246,248,3,9,4,0,247,246,
        1,0,0,0,248,251,1,0,0,0,249,247,1,0,0,0,249,250,1,0,0,0,250,252,
        1,0,0,0,251,249,1,0,0,0,252,253,5,33,0,0,253,44,1,0,0,0,254,255,
        5,68,0,0,255,290,8,1,0,0,256,257,5,68,0,0,257,258,5,65,0,0,258,259,
        1,0,0,0,259,290,8,2,0,0,260,261,5,68,0,0,261,262,5,65,0,0,262,263,
        5,78,0,0,263,264,1,0,0,0,264,290,8,3,0,0,265,266,5,66,0,0,266,290,
        8,4,0,0,267,268,5,66,0,0,268,269,5,69,0,0,269,270,1,0,0,0,270,290,
        8,5,0,0,271,272,5,66,0,0,272,273,5,69,0,0,273,274,5,76,0,0,274,275,
        1,0,0,0,275,290,8,4,0,0,276,277,5,66,0,0,277,278,5,69,0,0,278,279,
        5,76,0,0,279,280,5,69,0,0,280,281,1,0,0,0,281,290,8,6,0,0,282,283,
        5,66,0,0,283,284,5,69,0,0,284,285,5,76,0,0,285,286,5,69,0,0,286,
        287,5,67,0,0,287,288,1,0,0,0,288,290,8,7,0,0,289,254,1,0,0,0,289,
        256,1,0,0,0,289,260,1,0,0,0,289,265,1,0,0,0,289,267,1,0,0,0,289,
        271,1,0,0,0,289,276,1,0,0,0,289,282,1,0,0,0,290,46,1,0,0,0,291,294,
        8,8,0,0,292,294,3,45,22,0,293,291,1,0,0,0,293,292,1,0,0,0,294,48,
        1,0,0,0,295,299,3,41,20,0,296,298,3,47,23,0,297,296,1,0,0,0,298,
        301,1,0,0,0,299,297,1,0,0,0,299,300,1,0,0,0,300,303,1,0,0,0,301,
        299,1,0,0,0,302,304,3,21,10,0,303,302,1,0,0,0,303,304,1,0,0,0,304,
        50,1,0,0,0,305,309,3,41,20,0,306,308,3,47,23,0,307,306,1,0,0,0,308,
        311,1,0,0,0,309,310,1,0,0,0,309,307,1,0,0,0,310,313,1,0,0,0,311,
        309,1,0,0,0,312,314,5,32,0,0,313,312,1,0,0,0,313,314,1,0,0,0,314,
        315,1,0,0,0,315,316,3,11,5,0,316,52,1,0,0,0,317,321,3,43,21,0,318,
        320,3,47,23,0,319,318,1,0,0,0,320,323,1,0,0,0,321,322,1,0,0,0,321,
        319,1,0,0,0,322,325,1,0,0,0,323,321,1,0,0,0,324,326,5,32,0,0,325,
        324,1,0,0,0,325,326,1,0,0,0,326,327,1,0,0,0,327,328,3,11,5,0,328,
        54,1,0,0,0,329,330,5,79,0,0,330,331,5,66,0,0,331,56,1,0,0,0,332,
        333,5,83,0,0,333,334,5,71,0,0,334,58,1,0,0,0,335,336,5,76,0,0,336,
        342,5,69,0,0,337,338,5,76,0,0,338,342,5,65,0,0,339,340,5,76,0,0,
        340,342,5,39,0,0,341,335,1,0,0,0,341,337,1,0,0,0,341,339,1,0,0,0,
        342,60,1,0,0,0,343,344,5,67,0,0,344,345,5,82,0,0,345,346,5,65,0,
        0,346,347,5,82,0,0,347,348,5,73,0,0,348,352,1,0,0,0,349,351,8,9,
        0,0,350,349,1,0,0,0,351,354,1,0,0,0,352,350,1,0,0,0,352,353,1,0,
        0,0,353,355,1,0,0,0,354,352,1,0,0,0,355,356,6,30,0,0,356,62,1,0,
        0,0,357,359,3,9,4,0,358,357,1,0,0,0,359,360,1,0,0,0,360,358,1,0,
        0,0,360,361,1,0,0,0,361,362,1,0,0,0,362,363,6,31,0,0,363,64,1,0,
        0,0,28,0,72,74,80,85,90,95,101,108,129,163,170,194,223,234,241,249,
        289,293,299,303,309,313,321,325,341,352,360,1,6,0,0
    ]

class APAGNANGAGELexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    ID = 1
    INT = 2
    PRINT = 3
    ASSIGN = 4
    FUNCTION_DEF = 5
    FUNCTION_CALL = 6
    RETURN = 7
    BLOCK_START = 8
    BLOCK_END = 9
    EQUALS = 10
    PLUS = 11
    MINUS = 12
    MULTIPLY = 13
    DIVIDE = 14
    LOOP = 15
    LOOP_COUNTER = 16
    BREAK = 17
    IF = 18
    STRING_LINE = 19
    STRING_ASSIGN = 20
    STRING_INPUT = 21
    LIST = 22
    LIST_POP = 23
    LIST_INDEX = 24
    COMMENT = 25
    WS_ = 26

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'POV'", "'DANS'", "'QUOI'", "'FEUR'", "'FAIT'", "'BELECK'", 
            "'+'", "'-'", "'*'", "'/'", "'OUH'", "'FF'", "'GENRE'", "'OB'", 
            "'SG'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "INT", "PRINT", "ASSIGN", "FUNCTION_DEF", "FUNCTION_CALL", 
            "RETURN", "BLOCK_START", "BLOCK_END", "EQUALS", "PLUS", "MINUS", 
            "MULTIPLY", "DIVIDE", "LOOP", "LOOP_COUNTER", "BREAK", "IF", 
            "STRING_LINE", "STRING_ASSIGN", "STRING_INPUT", "LIST", "LIST_POP", 
            "LIST_INDEX", "COMMENT", "WS_" ]

    ruleNames = [ "ID", "DECIMAL_SEPARATOR", "INT", "PRINT", "WS", "ASSIGN", 
                  "FUNCTION_DEF", "FUNCTION_CALL", "RETURN", "BLOCK_START", 
                  "BLOCK_END", "EQUALS", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", 
                  "LOOP", "LOOP_COUNTER", "BREAK", "IF", "STRING_START", 
                  "INPUT", "CHARS_NOT_ALLOWED_COMPLETIONS", "CHARS", "STRING_LINE", 
                  "STRING_ASSIGN", "STRING_INPUT", "LIST", "LIST_POP", "LIST_INDEX", 
                  "COMMENT", "WS_" ]

    grammarFileName = "APAGNANGAGE.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


